// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  nombre     String
  email      String    @unique
  password   String
  rol        Rol       @default(operario)
  isActive Boolean
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  notification Notification[]
  user Empresa[]
}


model Empresa {
  id         Int       @id @default(autoincrement())
  nombre String
  ubicacion String
  superficie  String
  userId Int
  user User @relation(fields: [userId], references: [id])
  lote Lote[]
  inventario Inventario[]
  corral Corral[]
}

enum Rol {
  admin
  operario
}

//
// üåæ SECTOR AGR√çCOLA
//
model Lote {
  id          Int        @id @default(autoincrement())
  nombre      String
  superficie  Float
  ubicacion   String
  empresaId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  suelos      Suelo[]
  cultivos    Cultivo[]
  empresa Empresa @relation(fields: [empresaId], references: [id])
}

model Suelo {
  id              Int       @id @default(autoincrement())
  tipo            String
  textura         String?
  ph              Float?
  materiaOrganica Float?
  nitrogeno       Float?
  fosforo         Float?
  potasio         Float?
  loteId          Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lote            Lote      @relation(fields: [loteId], references: [id])
  analisis        AnalisisSuelo[]
}

model AnalisisSuelo {
  id            Int       @id @default(autoincrement())
  fecha         DateTime  @default(now())
  laboratorio   String?
  observaciones String?
  sueloId       Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  suelo         Suelo     @relation(fields: [sueloId], references: [id])
}
model Cultivo {
  id              Int              @id @default(autoincrement())
  nombre          String
  variedad        String?
  fechaSiembra    DateTime
  fechaCosecha    DateTime?
  superficie      Float            // ha
  rendimiento     Float?           // toneladas producidas
  loteId          Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  lote            Lote             @relation(fields: [loteId], references: [id])
  cultivoCosto    CultivoCosto[]
}

model CultivoCosto {
  id               Int      @id @default(autoincrement())
  cultivoId        Int
  tipoCosto        String   // "Fertilizante", "Riego", etc.
  cantidadAplicada Float?
  costoPorUnidad   Decimal  @db.Decimal(10,2)
  cultivo          Cultivo  @relation(fields: [cultivoId], references: [id])
}

//
// üêÑ SECTOR GANADERO
//
model Corral {
  id          Int        @id @default(autoincrement())
  nombre      String
  capacidad   Int
  empresaId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tipo        TipoCorral
  empresa Empresa @relation(fields: [empresaId], references: [id])
  animales    Animal[]
}

enum TipoCorral {
  engorde
  cria 
  lechero
}

model Animal {
  id             Int       @id @default(autoincrement())
  identificacion String    @unique
  especie        Especie
  raza           String?
  edad           Int?
  peso           Float?
  corralId       Int
  corral         Corral    @relation(fields: [corralId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  animalCosto AnimalCosto[]
}



enum Especie {
   bovino
   ovino
   porcino
}

model AnimalCosto {
  id               Int      @id @default(autoincrement())
  animalId         Int
  tipoCosto        TipoCosto   
  cantidadAplicada Float?  // kg de alimento, dosis, horas, etc.
  costoPorUnidad   Decimal  @db.Decimal(10,2)
  createdAt        DateTime @default(now())

  animal           Animal   @relation(fields: [animalId], references: [id])
}
//
// üì¶ INVENTARIO 
//

enum TipoCosto {
  Alimento
  Vacunacion
  Desparasitacion
  Veterinario
}
model Inventario {
  id          Int       @id @default(autoincrement())
  nombre      String
  categoria   CategoriaInventario
  cantidad    Int
  unidad String?
  almacen String
  empresaId Int
  empresa Empresa @relation(fields: [empresaId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt   DateTime   @updatedAt
}



enum CategoriaInventario {
  insumos
  maquinas
  herramientas
}


// NOTIFICACION

model Notification {
  id          Int       @id @default(autoincrement())
  message      String
  userId  Int
  type TypeRequest
  createdAt  DateTime  @default(now())
  updatedAt   DateTime   @updatedAt
  user User @relation(fields: [userId], references: [id])
}

enum TypeRequest {
  register_request
  acept_register
}